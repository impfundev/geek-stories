// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id @unique @default(uuid())
  userName      String    @unique @db.VarChar(50)
  email         String    @unique @db.VarChar(50)
  password      String    @db.LongText
  firstName     String?   @db.VarChar(50)
  lastName      String?   @db.VarChar(50)
  bio           String?   @db.VarChar(150)
  role          Roles
  posts         Posts[]
  pages         Pages[]
  comments      Comments[]

  subscription     Subscription @relation(fields: [subscription_id], references: [id])
  subscription_id  Int
}

model Subscription {
  id            Int       @id @unique @default(autoincrement())
  type          String
  price         String
  description   String
  benefit       Json

  user          User[]

  @@map("subscription")
}

model Posts {
  id                String       @id @unique @default(uuid())
  author            User @relation(fields: [authorId], references: [id])
  authorId          String
  title             String    @db.VarChar(85)
  createAt          DateTime  @default(now())   
  updateAt          DateTime  @default(now())   
  content           String?   @db.LongText
  jsonContent       Json?     @db.Json
  excerpt           String?   @db.VarChar(150)
  published         Published
  tags              Tags[]
  featured          Boolean   @default(false)
  thumbnail_url     String?
  thumbnail_alt     String?
  thumbnail_width   String?
  thumbnail_height  String?
  comments          Comments[]

  @@map("posts")
}

model Pages {
  id                String       @id @unique @default(uuid())
  author            User @relation(fields: [authorId], references: [id])
  authorId          String
  title             String    @db.VarChar(85)
  createAt          DateTime  @default(now())   
  updateAt          DateTime  @default(now())   
  content           String?   @db.LongText
  jsonContent       Json?     @db.Json
  published         Published

  @@map("pages")
}

model Comments {
  id            String  @id @unique @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  content       String  @db.Text
  post          Posts   @relation(fields: [postId], references: [id])
  postId        String  @unique
  createAt      DateTime  @default(now())   
  updateAt      DateTime  @default(now())  
}

model Tags {
  id       String   @id @unique @default(uuid())
  name     String?  @db.VarChar(25)
  posts    Posts[]

  @@map("tags")
}

enum Published {
  draft
  upload
}

enum Roles {
  admin
  editor
  author
  member
}